*****************************************************************************
                               Reflection
                             Workshop - #4
Full Name  : Mohamed lalji
Student ID#: 168229219

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1. Selection allows the program to have more than one path in a sense that it performs the sequence based on the input from the user. Basically
   as the name suggests selection is all about choices (selecting), and these choices are made by the user. 
	
     example 1: printf("How many APPLES do you need? : ");
                scanf("%d", &nApples);

                if (nApples < 0)
                {
                     printf("ERROR: Value must be 0 or more.\n");
                }

     example 2:  printf("\nPick some APPLES... how many did you pick? : ");
                 scanf("%d", &nPicked);

                 if (nPicked <= 0)
                 {
                     printf("ERROR: You must pick at least 1!");
                 }

     example 3:  if (nPears > 0)
                    {
                        printf("Looks like we still need some PEARS...");
                    }
                    else
                    {
                        printf("Great, that's the pears done!\n");
                    }

	In each of the examples above, the user was asked for their input based on which the program carried out the sequnce that follows.

2. A nested construct is basically used to test a series of conditions, following another true condition.
   
 example 1:     if (nPicked <= 0)
                {
                    printf("ERROR: You must pick at least 1!");
                }
                else if (nPicked > nOranges)
                {
                    printf("You picked too many... only %d more ORANGE(S) are needed.", nOranges);
                }

In the above example, the program checks whether nPicked is less than equal to zero or whether it is greater than nOranges. Based on whatever is true about nPicked, the program runs 
the respected sequence.

3. The 'do-while' is by far the best iteration, reason being that it performs the sequence before checking the condition whcih means that it will run the sequence atleast once before
it checks the condition unlike the 'while' and 'for' iterations both of which check the condition first then run the sequence. 
  
  Example:  do 
		{
          	  printf("How many TOMATOES do you need? : ");
          	  scanf("%d", &nTomatoes);

         		   if (nTomatoes < 0)
          		   {
          		      printf("ERROR: Value must be 0 or more.\n");
         		   }
            
		} while (nTomatoes < 0);

In the example above, the 'do-while' iteration was used which means that the users were prompted for input as to how many Tomatoes they need before the condition 'nTomatoes < 0' was tested.
Assuming the 'while'/'for' iterations were used, then the users would not be prompted at all and the loop would be skipped as a whole which is not what we want. Furthermore, 'do-while' is 
useful when the condition is dependant on other inputs. 







